{"version":3,"file":"static/js/139.4dc36654.chunk.js","mappings":"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","sources":["component/Contact/validationSchema.ts","component/Contact/FormFields.tsx","component/Contact/View.jsx"],"sourcesContent":["import { t } from 'i18next';\nimport { object, string } from 'yup';\n\nconst validationsSchema = object().shape({\n    name: string().required(t('El nombre es requerido')).nullable(),\n    email: string()\n        .email(t('Formato de correo inválido'))\n        .required(t('El email es requerido'))\n        .nullable(),\n    tel: string().required(t('El teléfono es requerido')).nullable(),\n    message: string().required(t('El mensaje es requerido')),\n    subject: string().required(t('El asunto es requerido')),\n});\n\nexport default validationsSchema;\n","import { t } from 'i18next'\nimport React from 'react'\nimport TextField from '@mui/material/TextField'\nimport Alert from '@mui/material/Alert'\nimport LoadingButton from '@mui/lab/LoadingButton'\n\ninterface FormFieldsProps {\n  errors: any\n  handleChange: any\n  handleBlur: any\n  isValid: any\n  isSubmitting: any\n  values: any\n  handleSubmit: any\n  resetForm: any\n  loadState: ''\n}\nconst FormFields = (props: FormFieldsProps) => {\n  const {\n    errors,\n    handleChange,\n    handleBlur,\n    isValid,\n    isSubmitting,\n    values,\n    handleSubmit,\n    resetForm,\n    loadState,\n  } = props\n  return (\n    <div justify=\"space-between\" gutter={[0, 15]}>\n      <div sm={24} md={11}>\n        <TextField\n          onBlur={handleBlur}\n          error={!!errors.name}\n          helperText={errors.name}\n          id=\"name\"\n          size=\"medium\"\n          name=\"name\"\n          label={t('Name')}\n          value={values.name}\n          required\n          onChange={handleChange}\n          fullWidth\n        />\n      </div>\n      <div sm={24} md={11}>\n        <TextField\n          onChange={handleChange}\n          error={!!errors.email}\n          helperText={errors.email}\n          onBlur={handleBlur}\n          required\n          size=\"medium\"\n          id=\"email\"\n          name=\"email\"\n          value={values.email}\n          label={t('Email')}\n          fullWidth\n        />\n      </div>\n      <div sm={24} md={11}>\n        <TextField\n          onChange={handleChange}\n          error={!!errors.tel}\n          helperText={errors.tel}\n          onBlur={handleBlur}\n          size=\"medium\"\n          name=\"tel\"\n          id=\"tel\"\n          value={values.tel}\n          label={t('Tel')}\n          fullWidth\n        />\n      </div>\n      <div sm={24} md={11}>\n        <TextField\n          onChange={handleChange}\n          error={!!errors.subject}\n          helperText={errors.subject}\n          onBlur={handleBlur}\n          required\n          size=\"medium\"\n          id=\"subject\"\n          value={values.subject}\n          label={t('Subject')}\n          fullWidth\n        />\n      </div>\n      <div md={24}>\n        <TextField\n          onChange={handleChange}\n          onBlur={handleBlur}\n          multiline\n          id=\"message\"\n          error={!!errors.message}\n          helperText={errors.message}\n          name=\"message\"\n          value={values.message}\n          divs={4}\n          fullWidth\n          required\n          label={t('Message')}\n        />\n      </div>\n\n      <div span={24}>\n        <div justify=\"center\" style={{ marginTop: '4vh' }}>\n          <LoadingButton\n            type=\"submit\"\n            variant=\"contained\"\n            divor=\"primary\"\n            loading={\n              loadState === LoadStates.LOADING || loadState === LoadStates.ERROR\n            }\n            onClick={\n              isValid && !isSubmitting\n                ? () => handleSubmit(values, resetForm)\n                : undefined\n            }\n          >\n            {t('Send')}\n          </LoadingButton>\n        </div>\n      </div>\n      <div span={24}>\n        <div justify=\"center\">\n          {loadState === LoadStates.LOADED && (\n            <Alert severity=\"success\">{t('Your message has been sent')}</Alert>\n          )}\n          {loadState === LoadStates.ERROR && (\n            <Alert severity=\"error\">{t('An error occurred')}</Alert>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default FormFields\n","import { useEffect, useState } from 'react'\n// @ts-ignore\nimport background from '../../assets/img/BackgroundContact.jpg'\n\nimport validationsSchema from './validationSchema'\nimport { Formik } from 'formik'\nimport FormFields from './FormFields'\nimport { t } from 'i18next'\n\nconst initialValues = {\n  name: '',\n  email: '',\n  message: '',\n  subject: '',\n  tel: '',\n}\n\nconst Contact = () => {\n  const [loadState, setLoadState] = useState('')\n  const handleSubmit = (values, resetForm: () => void) => {\n    sendEmail(values, resetForm)\n  }\n  const sendEmail = async (values, resetForm: () => void) => {\n    if (loadState !== '') return\n    setLoadState('')\n    // Api.emails\n    //   .sendEmail(values)\n    //   .then(() => {\n    //     setLoadState(LoadStates.LOADED)\n    //     resetForm()\n    //     setTimeout(() => {\n    //       setLoadState(LoadStates.NOT_LOADED)\n    //     }, 2000)\n    //   })\n    //   .catch(() => {\n    //     setLoadState(LoadStates.ERROR)\n    //     setTimeout(() => {\n    //       setLoadState(LoadStates.NOT_LOADED)\n    //     }, 2000)\n    //   })\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    document.querySelector('body').style.backgroundImage = `url(${background})`\n  }, [])\n\n  return (\n    <div align=\"top\" justify=\"center\" className=\"Contact Home-div\">\n      <div xs={24} sm={24} md={24} xl={14} xxl={12} className=\"Contact-header\">\n        <div align=\"top\" justify=\"center\">\n          <div span={24}>\n            <h2>{t('Contact')}</h2>\n          </div>\n          <div xs={20} sm={18} md={12}>\n            <Formik\n              onSubmit={(values, { resetForm }) =>\n                handleSubmit(values, resetForm)\n              }\n              initialValues={initialValues}\n              validationSchema={validationsSchema}\n            >\n              {({\n                errors,\n                handleChange,\n                handleBlur,\n                isValid,\n                isSubmitting,\n                values,\n                resetForm,\n              }) => (\n                <form>\n                  <FormFields\n                    errors={errors}\n                    handleChange={handleChange}\n                    handleBlur={handleBlur}\n                    isValid={isValid}\n                    isSubmitting={isSubmitting}\n                    values={values}\n                    handleSubmit={handleSubmit}\n                    resetForm={resetForm}\n                    loadState={loadState}\n                  />\n                </form>\n              )}\n            </Formik>\n\n            <div></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Contact\n"],"names":["object","shape","name","string","required","t","nullable","email","tel","message","subject","props","errors","handleChange","handleBlur","isValid","isSubmitting","values","handleSubmit","resetForm","loadState","justify","gutter","sm","md","TextField","onBlur","error","helperText","id","size","label","value","onChange","fullWidth","multiline","divs","span","style","marginTop","LoadingButton","type","variant","divor","loading","LoadStates","LOADING","ERROR","onClick","undefined","LOADED","Alert","severity","initialValues","useState","setLoadState","sendEmail","useEffect","document","querySelector","backgroundImage","background","align","className","xs","xl","xxl","onSubmit","validationSchema","validationsSchema"],"sourceRoot":""}